@startuml WWE
allow_mixing
skin rose

title Electrically Supported Fishing Rod - "WWE Sumołów 2000"

node "HostApp - Desktop Serial" {
  package Frontend{
    class MainWindow {
      - uint? TechnologyIndex
      - List<CallbackInterface> BackendImplementations
      + NLog.Logger? Logger
      + MainWindow()
      - void OpenAppSettings(object sender)
      + void EnableLogging()
      + void DisableLogging()
      - void ConnType_SelectionChanged(object sender)
      - void ScanDevices(object sender)
      - void SelectDevice_SelectionChanged(object sender)
      - void ConnectDevice(object sender)
      - void OpenConnectionOptions(object sender)
      - void Init(object sender)
      - void OpenInitParams(object sender)
      ..
      - void SetMode(object sender)
      - void GetMode(object sender)
      - void updateModeTextBox()
      - void enableDisableGuiElementsSetSpeedPos()
      {method} TODO - Not fully implemented
      ..
      - void SetSpeed(object sender)
      - void GetSpeed(object sender)
      ..
      - void SetPosition(object sender)
      - void GetPosition(object sender)
      {method} TODO - Not fully implemented
      ..
      - void OffOnDevice(object sender)
      - void GetOffOnState(object sender)
      - void enableDisableGuiElementsOffOn()
      ..
      - void disableStackPanels(List<string> namesOfPanels)
      - void openMessageWindow(string message)
    }

    class MessageBox {
      + MessageBox()
      + Task<> Show()
    }

    class InitOptions {
      + InitOptions()
      - void UpdateInitValues()
      - void SaveInitConfigToFile()
      - void LoadInitConfigToFile()
      {method} TODO - Not fully implemented
    }

    class ConnectionOptions {
      +ConnectionOptions()
      TODO
      {method} TODO - Not fully implemented
    }

    class GeneralSettings {
      - MainWindow ParentWindow
      + GeneralSettings(MainWindow parentWindow)
      + void Show()
      - void LoggingCheckBox_Checked()
      - void LoggingCheckBox_UnChecked()
    }
  }

  package Backend{
    class CallbackBT {
      TODO - To be implemented
      + CallbackBT()
      + void ListDevices()
      + List<string> GetConnectionsAsStringList();
       {method} etc.
    }

    class CallbackSerialShell {
      - List<SerialDriverConnection> ListOfDevices
      - uint? connectionIndex
      + HostappBackendSerial()
      + void ListDevices()
      + List<string> GetConnectionsAsStringList();
       {method} etc.
    }

    Interface CallbackInterface {
      + void ListDevices()
      + List<string> GetConnectionsAsStringList();
      + void ChooseConnectionByIndex(uint index);
      + void OpenConnection();
      ..
      + void SendInitialisation();
      ..
      + void SetMode(ControlMode new_mode);
      + ControlMode GetMode();
      ..
      + void SetSpeed(uint target_speed_in_mrpm);
      + uint GetSpeed();
      ..
      + void SetPosition(uint new_position);
      + uint GetPosition();
      ..
      + void TurnDriverOn();
      + void TurnDriverOff();
      + bool GetOfOon();
      ..
      + void CloseConnection();
    }

    package Utils{
      Enum ControlModes_Cs {
        SPEED,
        POSITION
      }

      Enum MotorDirection_Cs{
        FORWARD,
        BACKWARD
      }

      package Exceptions{
        DriverException <|-up- Exception
        class DriverException {
        }

        DeviceNotConnectedException <|-up- DriverException

        class DeviceNotConnectedException  {
        }

        ErrorFromDriverException <|-up- DriverException

        class ErrorFromDriverException  {
        }

        etc <|-up- DriverException

        class etc  {
        }
      }

      class SerialDriverConnection{
        + string Port
        + string HardwareID
        + string SoftwareVersion
        - SerialPort? SerialConnection
        + SerialDriverConnection(string port, string hw_id, string sw_ver)
        + void open_serial_port()
        + void write_data(string str_of_data)
        + List<string> read_lines()
        + void close_serial_port()

      }
    }
  }
}

CallbackBT <|-- CallbackInterface
CallbackSerialShell <|-- CallbackInterface
CallbackInterface  *--  ControlModes_Cs
CallbackInterface  *--  MotorDirection_Cs
CallbackInterface  *--  DriverException

CallbackSerialShell  *--  SerialDriverConnection

MainWindow  *--  CallbackInterface
MainWindow  *--  GeneralSettings
MainWindow  *--  InitOptions
MainWindow  *--  ConnectionOptions

node "HostApp - Mobile BT" {
  package KiviAndroidGui{

  }

  class DesktopRepl{
    + start_repl()
  }

  class PythonBackend{
    + async List[BLEDevice] cmd_scan()
    ..
    + async bool cmd_connect()
    + async bool cmd_autoconnect()
    + async bool cmd_disconenct()
    + bool check_connection(addr: str)
    ..
    + async cmd_init()
    + async int cmd_speed_get()
    + async cmd_speed_set(speed_val: int)
    + async str cmd_driver()
    + async cmd_boot()
  }

  KiviAndroidGui *.down. PythonBackend
  DesktopRepl *.down. PythonBackend
}

node nRF52840Dongle {
  Struct MotorDriverChannel {
    + pwm_dt_spec pwm_motor_driver
    + gpio_dt_spec set_dir_pins[PINS_PER_CHANNEL]
    + gpio_dt_spec enc_pins[PINS_PER_CHANNEL]
    + gpio_callback enc_cb[PINS_PER_CHANNEL]
    ..
    + uint64_t count_cycles
	  + uint64_t old_count_cycles
    ..
    + uint32_t target_speed_mrpm
    + uint32_t actual_mrpm
    + uint32_t speed_control
    ..
    + uint32_t curr_pos
    + uint32_t target_position
    + int32_t position_delta
    + uint32_t max_pos
    ..
    + bool prev_val_enc[PINS_PER_CHANNEL]
    + MotorDirection actual_dir
    ..
    + bool is_motor_on
  }

  MotorDriver *-left- MotorDriverChannel

  object MotorDriver {
    - DriverVersion driver_ver
    - DriverChannel drv_channel
    ..
    + int init_pwm_motor_driver(uint32_t speed_max_mrpm)
    ..
    + int target_speed_set(uint32_t value, enum ChannelNumber chnl)
    - int speed_pwm_set(uint32_t value, enum ChannelNumber chnl)
    - void enc_callback()
    - void update_speed_continuus()
    + int speed_get(uint32_t* value, enum ChannelNumber chnl)
    ..
    + int set_direction_raw(enum MotorDirection direction, enum ChannelNumber chnl)
    + int get_motor_actual_direction(enum ChannelNumber chnl, enum MotorDirection *out_dir)
    ..
    + int motor_on(MotorDirection direction)
    + int motor_off(void)
    ..
    return_codes_t mode_set(enum ControlModes new_mode)
    return_codes_t mode_get(enum ControlModes *value)
    ..
    return_codes_t target_position_set(uint32_t new_target_position, enum ChannelNumber chnl)
    return_codes_t position_get(uint32_t *value, enum ChannelNumber chnl)
    ..
    + void enter_boot(void)
    + uint32_t get_current_max_speed(void)
    + bool get_motor_off_on(void)
    + uint32_t get_target_speed(void)
    + DriverVersion get_driver_version(void)
  }

  object NvmStorageDriver {
    + return_codes_t get_templates(struct Template *templates)
    + return_codes_t get_template_and_id_by_name(char *name, struct Template *result, uint8_t *out_id)
    + return_codes_t set_template(struct Template new_template)
    + uint8_t get_template_size(void)
    + return_codes_t remove_template_by_name(char *name)

    + void init_storage(void)
    + return_codes_t factory_reset(void)

    + return_codes_t get_current_template(struct Template *result)
    + return_codes_t set_current_template(char *name)

    + int get_errno_error_code(void)
    + unsigned int get_errno_error_line(void)
  }

  package serial_shell {
    object shell_direct_motor_control {
      - int cmd_speed()
      - int cmd_position()
      - int cmd_mode()
      - int cmd_actual_direction()
    }

    object shell_off_on {
      - int cmd_off_on_get()
      - int cmd_off_on_stop()
      - int cmd_off_on_start_forward()
      - int cmd_off_on_start_backward()
    }

    object shell_template {
      - int cmd_template_active()
      - int cmd_template_get()
      - int cmd_template_apply()
      - int cmd_template_set()
      - int cmd_template_clear()
      - int cmd_template_size()
    }

    object shell_utils {
      - int cmd_channel()
      - int cmd_drv_version()
      - int cmd_boot()
    }
  }

  package BLE {
    object ble_gatt {
      + SERVICE_UUID = 0xffaa
      + TX_CHAR_UUID_COMMAND = 0x6e006610
      + RX_CHAR_UUID_TEMPL_LIST = 0x6e006620
      + RX_CHAR_UUID_TEMPL_ACTIVE = 0x6e006621
      + RX_CHAR_UUID_SPEED = 0x6e006622
      + RX_CHAR_UUID_HW_VER = 0x6e006623
      + ssize_t read_ble_template_list()
      + ssize_t read_ble_template_active()
      + ssize_t read_ble_speed()
      + ssize_t read_ble_hw_ver()
      - convertToUint32(uint8_t *bytes)
      + ssize_t write_ble()
    }

    object ble_gatt_service {
      + init_bt()
      - connected()
      - disconnected()
      - bt_ready()
      - auth_cancel()
      - struct bt_data ad[2]
    }
  }

  object button {
    + void off_on_button_init(void)
    - void off_on_callback();
    - void calback_cooldown_expired()
  }

  package driver_utlis{
    Enum ErrorCodes{
      SUCCESS = 0,
      NOT_INITIALISED = 1,
      etc...
    }

    Enum MotorDirection_C{
      STOPPED,
      FORWARD,
      BACKWARD
    }

    Enum ControlModes_C {
      SPEED,
      POSITION
    }

    Enum ChannelNumber {
      CH0,
      CH1
    }

    Enum PinNumber {
      P0,
      P1
    }

    Struct DriverVersion {
      uint8_t major_version
      uint8_t minor_version
    }
  }
}



serial_shell .... CallbackSerialShell

BLE .... "HostApp - Mobile BT"

MotorDriver <... serial_shell
MotorDriver <... BLE

NvmStorageDriver <. serial_shell
MotorDriver <. NvmStorageDriver

MotorDriver <. button

driver_utlis <. MotorDriver

@enduml
